・マイクロサービスに行く前に段階がある、基本に対応してから検討してほしい。今日はCloud Frendryまで。
　https://www.enterpriseirregulars.com/103240/cloud-native-nice-get/
　・No Filesystem
　・Self Contained application プロセスとしてアプリをたちあげろ.JavaEE使うな
　・Platform Managed ports and addressing 

・ソース変更点
　・@GetMapping, @PostMapping
　・Spring Security 4.1から、パスワードエンコードのJavaConfigいらなくなったので消した
　・プロパティファイル application-cloud.properties 追加

■cf push
　・クラウド環境では、外から環境変数にアタッチするのがベストプラクティス
　・「管理プロセス」　管理タスクを１回かぎりのタスクとして実行せよ
　　- SPRING_DATASOURCE_INITIALIZEがこれ
　　※本来はFlywayを使う。DBのバージョンを見てアップデートしてくれる。

 ・AutoReconfigure
 　CF上でSpringを使うときのみ働く。
 　MySQLのサービスがバインドされていることを認識して、DIコンテナのデータソースを書き換える。
 　（application.propertiesの設定は無視される。）
　 バインドしたタイミングで、ID/PW、TagもCFが生成し環境変数に埋め込む 

 ・SpringCloudConnector
 　AutoReconfigureを上書きできる（むしろ自分でBean書いても上書きできない）
 　今回はMySQLのコネクションプールを2にする。
 　※AutoReconfiureはコネクションプールを4にしちゃう。本番では使えない。
 　※AutoReconfigureがスキップされたかどうかは、cf logsで確認 "Skipping auto-reconfiguring"
 
 ここまでで、プロセスと、ポートを外からバインドされている
 （Spring Bootは起動時にPORT環境変数をサーバポートに使うように設定されていて、CFがPORT環境変数を設定している）
 
 ■スケールアウト
 ・JsessionIdをたてて送るので、セッションIDが同じ間は同じインスタンスにいく
 ※今はセッションが共有できてないので、死んだノードにいた人は、再ログインさせられる。これを防ぐのがセッションのクラスタ化。
 
 ■ログ
 ・ログはストリームで扱え。標準出力に投げ込んで転送しろ。
 　CFは標準出力をAggregateする。
・CF側で保存しているのは cf logs --recent のとこだけ
　syslogかhttpで後れる

■セッションのクラスタ化 【※spring-sessionをロードして、propertyでstoreを指定するだけ】
　・ノードがダウンしても、ブルーグリーンデプロイメントでも再ログインなくせる
　・12factorでは、スティッキーセッションに頼ってはいけない
　・Spring Sessionがセッションを外においてくれるプロジェクト。Redisなどバックエンドは選べる。
　・spring boot 1.4から、spring.session.store-type=ができた
 ※Spring-Sessionにすると、Jsessionは使わなくなるので、スティッキーが外れる
 
 --- 
 これぐらいまでやってから、マイクロサービスにいってほしい。
 じゃないと、落ちても復旧しない、ログとれない、スケールしたらセッション切れる・・・などなる。
 
 ■Metric
 ・PCFMetric
 　・アプリ開発のフィードバックループをまわすための仕組み。アプリをアップデートした後の反応を見るなど。
 　　なので長期のメトリックは想定してない。

 ・Actuator
 ・★重要：MetricsConfig.java　
 　スケールアウトに対応したMetricをだす構成(カウンタなど）。
 　デフォルトだとインスタンスごとのHashMapにメトリックとるところをRedisにとるコンフィグ。
 　画面図のper instanceとper applicationとなっているのがそれ。
 　本の図のページで解説されていたMetricReaderなどのカスタマイズをしている。　★貴重なサンプル
 ・AdminSecurityConfig.java　
 actuatorのエンドポイントのセキュリティ設定
 @Order(-5)でSecurityConfigファイルの優先度を指定している。 
 
 ■Blue-Green
 ・AutoPilotプラグイン
  cf zero-downtime-push mrs-ss -f manifest.yml
  古いアプリを勝手に削除しちゃう。のでこれはblue-greenではない。
 ★ビルドパックのバージョンをゼロダウンタイムであげるデモ。脆弱性対策を無停止でできる。
 
 -----
 ここまでやって、Cloud Frendry。ここまでやってからマイクロサービスへ。
JavaEEとかこのレベルもやらずにMicroService対応とか言っている。
 
 ⇒ これをマイクロサービスにしたソースも書いている。
 https://github.com/mrs-services/
　 ★Spring Cloudてんこ盛り構成
  OAuth, jepkin, spring cloud contract（テスト）, netflix oss

 -----
 Springの今後
 
                         Spring Web Reactive
Servletの代わりにノンブロッキングなコンテナに変わる   Http Reactive

今までのプログラミングモデルでリアクティブを書ける、のと、
新しいプログラミングモデルでやるのがでる

サーバレス
　Spring Cloud Data Flow（Spring XDから移行した）
  入力-変換-出力をGUIで設定。各モジュールがSpring Bootアプリ（他でもいい）。
　ストリームも単発処理(Spring Cloud Task)もできる

　データマイクロサービス
　unixでパイプでつなぐような処理を、ひとつひとつマイクロサービスで、
　パイプがメッセージブローカ（Kafka等）
　プラットフォームはCF, Kubernetes, ...

stream createコマンドで、入力モジュール、出力モジュールなど指定すると、
たとえばCFなら、それぞれSpring Bootアプリデプロイし、
サービスバインドし、間をメッセージキューでつなぐところまでやってくれる
（サーバレスな使い方）

Spring Cloud Task Programming Model

　Q. Eureka, Ribbonをつかった場合のblue-green deployment
★A. ベストプラクティス検討中.
　 Eurikaのリフレッシュ時間を相当早くしないと、CFのデプロイはゼロダウンタイムだが、
　 Eurekaへのサービスインスタンス登録に時間がかかるので、旧インスタンスに割り当てられる時間ができてしまう
 https://metrics.run.pez.pivotal.io/
 https://github.com/joshlong/operationalized-applications-meetup/blob/master/src/main/java/com/example/DemoApplication.java
 https://github.com/spring-cloud/spring-cloud-netflix/issues/1290
 http://cloud.rohitkelapure.com/2016/06/multi-line-java-stack-traces-out-of.html
 